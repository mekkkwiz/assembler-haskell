        lw		0	6	pos1	x6 = 1
	    lw		0	1	n	    x1 = input[n]
	    lw		0	2	r	    x2 = intput[r]
		sw		5	1	stack	save n to stack
		add		5	6	5	    increment stack pointer
		sw		5	2	stack 	save r to stack
		add		5	6	5	    increment stack pointer
	    lw		0	4	comAdr	x4 = combi
	    jalr	4	7	    	call combi ,x7 = returnaddress
	    halt			
combi   lw		0	6	neg1	x6 = -1
		add		5	6	5		decrement stack pointer	
		lw		5	2	stack	load new r vaule from stack
		add		5	6	5		decrement stack pointer	
	    lw		5	1	stack	load new n vaule from stack
	    beq		2	0	L1	    if r == 0 jump to L1
	    beq		1	2	L1	    if n == r jump to L1
		lw		0	6	pos1	x6 = 1
		lw		0	4	neg1	x4 = -1
		add		1	4	4		x4 = n -1
		sw		5	4	stack	save n-1 to stack
		add		5	6	5	    increment stack pointer
		lw		0	4	neg1	x4 = -1
		add		2	4	4		x4 = r -1
		sw		5	4	stack	save r-1 to stack
		add		5	6	5	    increment stack pointer
		lw		0	4	neg1	x4 = -1
		add		1	4	4		x4 = n - 1
		sw		5	4	stack	save n-1 to stack
		add		5	6	5	    increment stack pointer
		sw		5	2	stack	save r to stack
		add		5	6	5	    increment stack pointer
		lw		0	4	comAdr	x4 = combi
		jalr	4	6			jump to combi to perfrom recursive and we dont care about x6		
L1      lw  	0  	6   pos1    x6 = 1
		add		3	6	3		x3 +=1
		lw		0	4	comAdr	x4 = combi
		beq		5	0	1		if stack pointer = 0(end of recursive) jump to halt
		jalr	4	6			if stack is not = 0	 save pc+1 to x6 but we dont care about x6
        jalr    7   6
comAdr	.fill	combi
pos1	.fill	1
neg1	.fill	-1
L1Adr	.fill	L1
n	    .fill	4       input
r	    .fill	2       input
stack	.fill	0